export default [
  {
    "statements": [
      "CREATE TABLE sales (\n    id uuid NOT NULL,\n    first_name text NOT NULL,\n    last_name text NOT NULL,\n    email text NOT NULL,\n    CONSTRAINT sales_pkey PRIMARY KEY (id)\n)",
      "CREATE TABLE tags (\n    id uuid NOT NULL,\n    name text NOT NULL,\n    color text NOT NULL,\n    CONSTRAINT tags_pkey PRIMARY KEY (id)\n)",
      "CREATE TABLE companies (\n    id uuid NOT NULL,\n    name text NOT NULL,\n    logo jsonb,\n    sector text NOT NULL,\n    size smallint NOT NULL,\n    linked_in text NOT NULL,\n    website text NOT NULL,\n    phone_number text NOT NULL,\n    address text NOT NULL,\n    zipcode text NOT NULL,\n    city text NOT NULL,\n    state_abbr text NOT NULL,\n    sales_id uuid NOT NULL,\n    created_at timestamp without time zone NOT NULL,\n    CONSTRAINT companies_pkey PRIMARY KEY (id),\n    CONSTRAINT companies_sales_id_fkey FOREIGN KEY (sales_id) REFERENCES sales(id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED\n)",
      "CREATE TABLE contacts (\n    id uuid NOT NULL,\n    first_name text NOT NULL,\n    last_name text NOT NULL,\n    gender text,\n    title text,\n    email text NOT NULL,\n    phone_number1 text,\n    phone_number2 text,\n    background text,\n    acquisition text,\n    avatar jsonb,\n    first_seen timestamp without time zone NOT NULL,\n    last_seen timestamp without time zone NOT NULL,\n    has_newsletter boolean,\n    status text NOT NULL,\n    company_id uuid NOT NULL,\n    sales_id uuid NOT NULL,\n    tags jsonb,\n    CONSTRAINT contacts_pkey PRIMARY KEY (id),\n    CONSTRAINT contacts_company_id_fkey FOREIGN KEY (company_id) REFERENCES companies(id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,\n    CONSTRAINT contacts_sales_id_fkey FOREIGN KEY (sales_id) REFERENCES sales(id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED\n)",
      "CREATE TABLE contact_notes (\n    id uuid NOT NULL,\n    date timestamp without time zone NOT NULL,\n    type text NOT NULL,\n    text text NOT NULL,\n    sales_id uuid NOT NULL,\n    contact_id uuid,\n    status text NOT NULL,\n    CONSTRAINT contact_notes_pkey PRIMARY KEY (id),\n    CONSTRAINT contact_notes_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contacts(id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED,\n    CONSTRAINT contact_notes_sales_id_fkey FOREIGN KEY (sales_id) REFERENCES sales(id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED\n)",
      "CREATE TABLE tasks (\n    id uuid NOT NULL,\n    due_date timestamp without time zone,\n    text text,\n    contact_id uuid,\n    sales_id uuid,\n    type text,\n    CONSTRAINT tasks_pkey PRIMARY KEY (id),\n    CONSTRAINT tasks_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contacts(id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED,\n    CONSTRAINT tasks_sales_id_fkey FOREIGN KEY (sales_id) REFERENCES sales(id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED\n)",
      "CREATE TABLE deals (\n    id uuid NOT NULL,\n    created_at timestamp without time zone NOT NULL,\n    name text NOT NULL,\n    contact_ids jsonb,\n    type text NOT NULL,\n    stage text NOT NULL,\n    description text,\n    amount integer NOT NULL,\n    updated_at timestamp without time zone NOT NULL,\n    start_at timestamp without time zone,\n    company_id uuid NOT NULL,\n    sales_id uuid NOT NULL,\n    anindex integer NOT NULL,\n    CONSTRAINT deals_pkey PRIMARY KEY (id),\n    CONSTRAINT deals_company_id_fkey FOREIGN KEY (company_id) REFERENCES companies(id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,\n    CONSTRAINT deals_sales_id_fkey FOREIGN KEY (sales_id) REFERENCES sales(id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED\n)",
      "CREATE TABLE deal_notes (\n    id uuid NOT NULL,\n    date timestamp without time zone NOT NULL,\n    type text NOT NULL,\n    deal_id uuid NOT NULL,\n    sales_id uuid NOT NULL,\n    text text NOT NULL,\n    CONSTRAINT deal_notes_pkey PRIMARY KEY (id),\n    CONSTRAINT deal_notes_deal_id_fkey FOREIGN KEY (deal_id) REFERENCES deals(id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,\n    CONSTRAINT deal_notes_sales_id_fkey FOREIGN KEY (sales_id) REFERENCES sales(id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED\n)",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'sales', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_sales_primarykey ON \"public\".\"sales\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_sales_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_sales_primarykey\n  BEFORE UPDATE ON \"public\".\"sales\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_sales_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_sales_into_oplog ON \"public\".\"sales\";",
      "    CREATE OR REPLACE FUNCTION insert_public_sales_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'sales';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'sales',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('email', new.\"email\", 'first_name', new.\"first_name\", 'id', new.\"id\", 'last_name', new.\"last_name\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_sales_into_oplog\n  AFTER INSERT ON \"public\".\"sales\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_sales_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_sales_into_oplog ON \"public\".\"sales\";",
      "    CREATE OR REPLACE FUNCTION update_public_sales_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'sales';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'sales',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('email', new.\"email\", 'first_name', new.\"first_name\", 'id', new.\"id\", 'last_name', new.\"last_name\"),\n            jsonb_build_object('email', old.\"email\", 'first_name', old.\"first_name\", 'id', old.\"id\", 'last_name', old.\"last_name\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_sales_into_oplog\n  AFTER UPDATE ON \"public\".\"sales\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_sales_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_sales_into_oplog ON \"public\".\"sales\";",
      "    CREATE OR REPLACE FUNCTION delete_public_sales_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'sales';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'sales',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('email', old.\"email\", 'first_name', old.\"first_name\", 'id', old.\"id\", 'last_name', old.\"last_name\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_sales_into_oplog\n  AFTER DELETE ON \"public\".\"sales\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_sales_into_oplog_function();",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'tags', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_tags_primarykey ON \"public\".\"tags\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_tags_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_tags_primarykey\n  BEFORE UPDATE ON \"public\".\"tags\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_tags_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_tags_into_oplog ON \"public\".\"tags\";",
      "    CREATE OR REPLACE FUNCTION insert_public_tags_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'tags';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'tags',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('color', new.\"color\", 'id', new.\"id\", 'name', new.\"name\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_tags_into_oplog\n  AFTER INSERT ON \"public\".\"tags\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_tags_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_tags_into_oplog ON \"public\".\"tags\";",
      "    CREATE OR REPLACE FUNCTION update_public_tags_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'tags';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'tags',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('color', new.\"color\", 'id', new.\"id\", 'name', new.\"name\"),\n            jsonb_build_object('color', old.\"color\", 'id', old.\"id\", 'name', old.\"name\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_tags_into_oplog\n  AFTER UPDATE ON \"public\".\"tags\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_tags_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_tags_into_oplog ON \"public\".\"tags\";",
      "    CREATE OR REPLACE FUNCTION delete_public_tags_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'tags';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'tags',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('color', old.\"color\", 'id', old.\"id\", 'name', old.\"name\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_tags_into_oplog\n  AFTER DELETE ON \"public\".\"tags\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_tags_into_oplog_function();",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'companies', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_companies_primarykey ON \"public\".\"companies\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_companies_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_companies_primarykey\n  BEFORE UPDATE ON \"public\".\"companies\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_companies_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_companies_into_oplog ON \"public\".\"companies\";",
      "    CREATE OR REPLACE FUNCTION insert_public_companies_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'companies';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'companies',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('address', new.\"address\", 'city', new.\"city\", 'created_at', new.\"created_at\", 'id', new.\"id\", 'linked_in', new.\"linked_in\", 'logo', new.\"logo\", 'name', new.\"name\", 'phone_number', new.\"phone_number\", 'sales_id', new.\"sales_id\", 'sector', new.\"sector\", 'size', new.\"size\", 'state_abbr', new.\"state_abbr\", 'website', new.\"website\", 'zipcode', new.\"zipcode\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_companies_into_oplog\n  AFTER INSERT ON \"public\".\"companies\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_companies_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_companies_into_oplog ON \"public\".\"companies\";",
      "    CREATE OR REPLACE FUNCTION update_public_companies_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'companies';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'companies',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('address', new.\"address\", 'city', new.\"city\", 'created_at', new.\"created_at\", 'id', new.\"id\", 'linked_in', new.\"linked_in\", 'logo', new.\"logo\", 'name', new.\"name\", 'phone_number', new.\"phone_number\", 'sales_id', new.\"sales_id\", 'sector', new.\"sector\", 'size', new.\"size\", 'state_abbr', new.\"state_abbr\", 'website', new.\"website\", 'zipcode', new.\"zipcode\"),\n            jsonb_build_object('address', old.\"address\", 'city', old.\"city\", 'created_at', old.\"created_at\", 'id', old.\"id\", 'linked_in', old.\"linked_in\", 'logo', old.\"logo\", 'name', old.\"name\", 'phone_number', old.\"phone_number\", 'sales_id', old.\"sales_id\", 'sector', old.\"sector\", 'size', old.\"size\", 'state_abbr', old.\"state_abbr\", 'website', old.\"website\", 'zipcode', old.\"zipcode\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_companies_into_oplog\n  AFTER UPDATE ON \"public\".\"companies\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_companies_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_companies_into_oplog ON \"public\".\"companies\";",
      "    CREATE OR REPLACE FUNCTION delete_public_companies_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'companies';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'companies',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('address', old.\"address\", 'city', old.\"city\", 'created_at', old.\"created_at\", 'id', old.\"id\", 'linked_in', old.\"linked_in\", 'logo', old.\"logo\", 'name', old.\"name\", 'phone_number', old.\"phone_number\", 'sales_id', old.\"sales_id\", 'sector', old.\"sector\", 'size', old.\"size\", 'state_abbr', old.\"state_abbr\", 'website', old.\"website\", 'zipcode', old.\"zipcode\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_companies_into_oplog\n  AFTER DELETE ON \"public\".\"companies\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_companies_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_companies_sales_id_into_oplog ON \"public\".\"companies\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_companies_sales_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'companies';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'sales',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"sales\"\n          WHERE \"id\" = NEW.\"sales_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_companies_sales_id_into_oplog\n  AFTER INSERT ON \"public\".\"companies\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_companies_sales_id_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_companies_sales_id_into_oplog ON \"public\".\"companies\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_companies_sales_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'companies';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'sales',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"sales\"\n          WHERE \"id\" = NEW.\"sales_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_companies_sales_id_into_oplog\n  AFTER UPDATE ON \"public\".\"companies\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_companies_sales_id_into_oplog_function();",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'contacts', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_contacts_primarykey ON \"public\".\"contacts\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_contacts_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_contacts_primarykey\n  BEFORE UPDATE ON \"public\".\"contacts\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_contacts_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_contacts_into_oplog ON \"public\".\"contacts\";",
      "    CREATE OR REPLACE FUNCTION insert_public_contacts_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'contacts';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'contacts',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('acquisition', new.\"acquisition\", 'avatar', new.\"avatar\", 'background', new.\"background\", 'company_id', new.\"company_id\", 'email', new.\"email\", 'first_name', new.\"first_name\", 'first_seen', new.\"first_seen\", 'gender', new.\"gender\", 'has_newsletter', new.\"has_newsletter\", 'id', new.\"id\", 'last_name', new.\"last_name\", 'last_seen', new.\"last_seen\", 'phone_number1', new.\"phone_number1\", 'phone_number2', new.\"phone_number2\", 'sales_id', new.\"sales_id\", 'status', new.\"status\", 'tags', new.\"tags\", 'title', new.\"title\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_contacts_into_oplog\n  AFTER INSERT ON \"public\".\"contacts\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_contacts_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_contacts_into_oplog ON \"public\".\"contacts\";",
      "    CREATE OR REPLACE FUNCTION update_public_contacts_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'contacts';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'contacts',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('acquisition', new.\"acquisition\", 'avatar', new.\"avatar\", 'background', new.\"background\", 'company_id', new.\"company_id\", 'email', new.\"email\", 'first_name', new.\"first_name\", 'first_seen', new.\"first_seen\", 'gender', new.\"gender\", 'has_newsletter', new.\"has_newsletter\", 'id', new.\"id\", 'last_name', new.\"last_name\", 'last_seen', new.\"last_seen\", 'phone_number1', new.\"phone_number1\", 'phone_number2', new.\"phone_number2\", 'sales_id', new.\"sales_id\", 'status', new.\"status\", 'tags', new.\"tags\", 'title', new.\"title\"),\n            jsonb_build_object('acquisition', old.\"acquisition\", 'avatar', old.\"avatar\", 'background', old.\"background\", 'company_id', old.\"company_id\", 'email', old.\"email\", 'first_name', old.\"first_name\", 'first_seen', old.\"first_seen\", 'gender', old.\"gender\", 'has_newsletter', old.\"has_newsletter\", 'id', old.\"id\", 'last_name', old.\"last_name\", 'last_seen', old.\"last_seen\", 'phone_number1', old.\"phone_number1\", 'phone_number2', old.\"phone_number2\", 'sales_id', old.\"sales_id\", 'status', old.\"status\", 'tags', old.\"tags\", 'title', old.\"title\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_contacts_into_oplog\n  AFTER UPDATE ON \"public\".\"contacts\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_contacts_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_contacts_into_oplog ON \"public\".\"contacts\";",
      "    CREATE OR REPLACE FUNCTION delete_public_contacts_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'contacts';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'contacts',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('acquisition', old.\"acquisition\", 'avatar', old.\"avatar\", 'background', old.\"background\", 'company_id', old.\"company_id\", 'email', old.\"email\", 'first_name', old.\"first_name\", 'first_seen', old.\"first_seen\", 'gender', old.\"gender\", 'has_newsletter', old.\"has_newsletter\", 'id', old.\"id\", 'last_name', old.\"last_name\", 'last_seen', old.\"last_seen\", 'phone_number1', old.\"phone_number1\", 'phone_number2', old.\"phone_number2\", 'sales_id', old.\"sales_id\", 'status', old.\"status\", 'tags', old.\"tags\", 'title', old.\"title\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_contacts_into_oplog\n  AFTER DELETE ON \"public\".\"contacts\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_contacts_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_contacts_company_id_into_oplog ON \"public\".\"contacts\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_contacts_company_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'contacts';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'companies',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"companies\"\n          WHERE \"id\" = NEW.\"company_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_contacts_company_id_into_oplog\n  AFTER INSERT ON \"public\".\"contacts\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_contacts_company_id_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_contacts_company_id_into_oplog ON \"public\".\"contacts\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_contacts_company_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'contacts';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'companies',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"companies\"\n          WHERE \"id\" = NEW.\"company_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_contacts_company_id_into_oplog\n  AFTER UPDATE ON \"public\".\"contacts\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_contacts_company_id_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_contacts_sales_id_into_oplog ON \"public\".\"contacts\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_contacts_sales_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'contacts';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'sales',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"sales\"\n          WHERE \"id\" = NEW.\"sales_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_contacts_sales_id_into_oplog\n  AFTER INSERT ON \"public\".\"contacts\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_contacts_sales_id_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_contacts_sales_id_into_oplog ON \"public\".\"contacts\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_contacts_sales_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'contacts';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'sales',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"sales\"\n          WHERE \"id\" = NEW.\"sales_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_contacts_sales_id_into_oplog\n  AFTER UPDATE ON \"public\".\"contacts\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_contacts_sales_id_into_oplog_function();",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'contact_notes', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_contact_notes_primarykey ON \"public\".\"contact_notes\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_contact_notes_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_contact_notes_primarykey\n  BEFORE UPDATE ON \"public\".\"contact_notes\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_contact_notes_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_contact_notes_into_oplog ON \"public\".\"contact_notes\";",
      "    CREATE OR REPLACE FUNCTION insert_public_contact_notes_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'contact_notes';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'contact_notes',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('contact_id', new.\"contact_id\", 'date', new.\"date\", 'id', new.\"id\", 'sales_id', new.\"sales_id\", 'status', new.\"status\", 'text', new.\"text\", 'type', new.\"type\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_contact_notes_into_oplog\n  AFTER INSERT ON \"public\".\"contact_notes\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_contact_notes_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_contact_notes_into_oplog ON \"public\".\"contact_notes\";",
      "    CREATE OR REPLACE FUNCTION update_public_contact_notes_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'contact_notes';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'contact_notes',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('contact_id', new.\"contact_id\", 'date', new.\"date\", 'id', new.\"id\", 'sales_id', new.\"sales_id\", 'status', new.\"status\", 'text', new.\"text\", 'type', new.\"type\"),\n            jsonb_build_object('contact_id', old.\"contact_id\", 'date', old.\"date\", 'id', old.\"id\", 'sales_id', old.\"sales_id\", 'status', old.\"status\", 'text', old.\"text\", 'type', old.\"type\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_contact_notes_into_oplog\n  AFTER UPDATE ON \"public\".\"contact_notes\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_contact_notes_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_contact_notes_into_oplog ON \"public\".\"contact_notes\";",
      "    CREATE OR REPLACE FUNCTION delete_public_contact_notes_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'contact_notes';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'contact_notes',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('contact_id', old.\"contact_id\", 'date', old.\"date\", 'id', old.\"id\", 'sales_id', old.\"sales_id\", 'status', old.\"status\", 'text', old.\"text\", 'type', old.\"type\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_contact_notes_into_oplog\n  AFTER DELETE ON \"public\".\"contact_notes\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_contact_notes_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_contact_notes_contact_id_into_oplog ON \"public\".\"contact_notes\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_contact_notes_contact_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'contact_notes';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'contacts',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"contacts\"\n          WHERE \"id\" = NEW.\"contact_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_contact_notes_contact_id_into_oplog\n  AFTER INSERT ON \"public\".\"contact_notes\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_contact_notes_contact_id_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_contact_notes_contact_id_into_oplog ON \"public\".\"contact_notes\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_contact_notes_contact_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'contact_notes';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'contacts',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"contacts\"\n          WHERE \"id\" = NEW.\"contact_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_contact_notes_contact_id_into_oplog\n  AFTER UPDATE ON \"public\".\"contact_notes\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_contact_notes_contact_id_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_contact_notes_sales_id_into_oplog ON \"public\".\"contact_notes\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_contact_notes_sales_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'contact_notes';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'sales',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"sales\"\n          WHERE \"id\" = NEW.\"sales_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_contact_notes_sales_id_into_oplog\n  AFTER INSERT ON \"public\".\"contact_notes\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_contact_notes_sales_id_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_contact_notes_sales_id_into_oplog ON \"public\".\"contact_notes\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_contact_notes_sales_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'contact_notes';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'sales',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"sales\"\n          WHERE \"id\" = NEW.\"sales_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_contact_notes_sales_id_into_oplog\n  AFTER UPDATE ON \"public\".\"contact_notes\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_contact_notes_sales_id_into_oplog_function();",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'tasks', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_tasks_primarykey ON \"public\".\"tasks\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_tasks_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_tasks_primarykey\n  BEFORE UPDATE ON \"public\".\"tasks\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_tasks_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_tasks_into_oplog ON \"public\".\"tasks\";",
      "    CREATE OR REPLACE FUNCTION insert_public_tasks_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'tasks';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'tasks',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('contact_id', new.\"contact_id\", 'due_date', new.\"due_date\", 'id', new.\"id\", 'sales_id', new.\"sales_id\", 'text', new.\"text\", 'type', new.\"type\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_tasks_into_oplog\n  AFTER INSERT ON \"public\".\"tasks\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_tasks_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_tasks_into_oplog ON \"public\".\"tasks\";",
      "    CREATE OR REPLACE FUNCTION update_public_tasks_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'tasks';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'tasks',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('contact_id', new.\"contact_id\", 'due_date', new.\"due_date\", 'id', new.\"id\", 'sales_id', new.\"sales_id\", 'text', new.\"text\", 'type', new.\"type\"),\n            jsonb_build_object('contact_id', old.\"contact_id\", 'due_date', old.\"due_date\", 'id', old.\"id\", 'sales_id', old.\"sales_id\", 'text', old.\"text\", 'type', old.\"type\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_tasks_into_oplog\n  AFTER UPDATE ON \"public\".\"tasks\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_tasks_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_tasks_into_oplog ON \"public\".\"tasks\";",
      "    CREATE OR REPLACE FUNCTION delete_public_tasks_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'tasks';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'tasks',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('contact_id', old.\"contact_id\", 'due_date', old.\"due_date\", 'id', old.\"id\", 'sales_id', old.\"sales_id\", 'text', old.\"text\", 'type', old.\"type\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_tasks_into_oplog\n  AFTER DELETE ON \"public\".\"tasks\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_tasks_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_tasks_contact_id_into_oplog ON \"public\".\"tasks\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_tasks_contact_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'tasks';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'contacts',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"contacts\"\n          WHERE \"id\" = NEW.\"contact_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_tasks_contact_id_into_oplog\n  AFTER INSERT ON \"public\".\"tasks\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_tasks_contact_id_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_tasks_contact_id_into_oplog ON \"public\".\"tasks\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_tasks_contact_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'tasks';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'contacts',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"contacts\"\n          WHERE \"id\" = NEW.\"contact_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_tasks_contact_id_into_oplog\n  AFTER UPDATE ON \"public\".\"tasks\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_tasks_contact_id_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_tasks_sales_id_into_oplog ON \"public\".\"tasks\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_tasks_sales_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'tasks';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'sales',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"sales\"\n          WHERE \"id\" = NEW.\"sales_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_tasks_sales_id_into_oplog\n  AFTER INSERT ON \"public\".\"tasks\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_tasks_sales_id_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_tasks_sales_id_into_oplog ON \"public\".\"tasks\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_tasks_sales_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'tasks';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'sales',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"sales\"\n          WHERE \"id\" = NEW.\"sales_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_tasks_sales_id_into_oplog\n  AFTER UPDATE ON \"public\".\"tasks\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_tasks_sales_id_into_oplog_function();",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'deals', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_deals_primarykey ON \"public\".\"deals\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_deals_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_deals_primarykey\n  BEFORE UPDATE ON \"public\".\"deals\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_deals_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_deals_into_oplog ON \"public\".\"deals\";",
      "    CREATE OR REPLACE FUNCTION insert_public_deals_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'deals';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'deals',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('amount', new.\"amount\", 'anindex', new.\"anindex\", 'company_id', new.\"company_id\", 'contact_ids', new.\"contact_ids\", 'created_at', new.\"created_at\", 'description', new.\"description\", 'id', new.\"id\", 'name', new.\"name\", 'sales_id', new.\"sales_id\", 'stage', new.\"stage\", 'start_at', new.\"start_at\", 'type', new.\"type\", 'updated_at', new.\"updated_at\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_deals_into_oplog\n  AFTER INSERT ON \"public\".\"deals\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_deals_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_deals_into_oplog ON \"public\".\"deals\";",
      "    CREATE OR REPLACE FUNCTION update_public_deals_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'deals';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'deals',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('amount', new.\"amount\", 'anindex', new.\"anindex\", 'company_id', new.\"company_id\", 'contact_ids', new.\"contact_ids\", 'created_at', new.\"created_at\", 'description', new.\"description\", 'id', new.\"id\", 'name', new.\"name\", 'sales_id', new.\"sales_id\", 'stage', new.\"stage\", 'start_at', new.\"start_at\", 'type', new.\"type\", 'updated_at', new.\"updated_at\"),\n            jsonb_build_object('amount', old.\"amount\", 'anindex', old.\"anindex\", 'company_id', old.\"company_id\", 'contact_ids', old.\"contact_ids\", 'created_at', old.\"created_at\", 'description', old.\"description\", 'id', old.\"id\", 'name', old.\"name\", 'sales_id', old.\"sales_id\", 'stage', old.\"stage\", 'start_at', old.\"start_at\", 'type', old.\"type\", 'updated_at', old.\"updated_at\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_deals_into_oplog\n  AFTER UPDATE ON \"public\".\"deals\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_deals_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_deals_into_oplog ON \"public\".\"deals\";",
      "    CREATE OR REPLACE FUNCTION delete_public_deals_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'deals';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'deals',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('amount', old.\"amount\", 'anindex', old.\"anindex\", 'company_id', old.\"company_id\", 'contact_ids', old.\"contact_ids\", 'created_at', old.\"created_at\", 'description', old.\"description\", 'id', old.\"id\", 'name', old.\"name\", 'sales_id', old.\"sales_id\", 'stage', old.\"stage\", 'start_at', old.\"start_at\", 'type', old.\"type\", 'updated_at', old.\"updated_at\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_deals_into_oplog\n  AFTER DELETE ON \"public\".\"deals\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_deals_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_deals_company_id_into_oplog ON \"public\".\"deals\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_deals_company_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'deals';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'companies',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"companies\"\n          WHERE \"id\" = NEW.\"company_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_deals_company_id_into_oplog\n  AFTER INSERT ON \"public\".\"deals\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_deals_company_id_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_deals_company_id_into_oplog ON \"public\".\"deals\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_deals_company_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'deals';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'companies',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"companies\"\n          WHERE \"id\" = NEW.\"company_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_deals_company_id_into_oplog\n  AFTER UPDATE ON \"public\".\"deals\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_deals_company_id_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_deals_sales_id_into_oplog ON \"public\".\"deals\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_deals_sales_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'deals';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'sales',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"sales\"\n          WHERE \"id\" = NEW.\"sales_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_deals_sales_id_into_oplog\n  AFTER INSERT ON \"public\".\"deals\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_deals_sales_id_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_deals_sales_id_into_oplog ON \"public\".\"deals\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_deals_sales_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'deals';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'sales',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"sales\"\n          WHERE \"id\" = NEW.\"sales_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_deals_sales_id_into_oplog\n  AFTER UPDATE ON \"public\".\"deals\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_deals_sales_id_into_oplog_function();",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'deal_notes', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_deal_notes_primarykey ON \"public\".\"deal_notes\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_deal_notes_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_deal_notes_primarykey\n  BEFORE UPDATE ON \"public\".\"deal_notes\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_deal_notes_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_deal_notes_into_oplog ON \"public\".\"deal_notes\";",
      "    CREATE OR REPLACE FUNCTION insert_public_deal_notes_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'deal_notes';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'deal_notes',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('date', new.\"date\", 'deal_id', new.\"deal_id\", 'id', new.\"id\", 'sales_id', new.\"sales_id\", 'text', new.\"text\", 'type', new.\"type\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_deal_notes_into_oplog\n  AFTER INSERT ON \"public\".\"deal_notes\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_deal_notes_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_deal_notes_into_oplog ON \"public\".\"deal_notes\";",
      "    CREATE OR REPLACE FUNCTION update_public_deal_notes_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'deal_notes';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'deal_notes',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('date', new.\"date\", 'deal_id', new.\"deal_id\", 'id', new.\"id\", 'sales_id', new.\"sales_id\", 'text', new.\"text\", 'type', new.\"type\"),\n            jsonb_build_object('date', old.\"date\", 'deal_id', old.\"deal_id\", 'id', old.\"id\", 'sales_id', old.\"sales_id\", 'text', old.\"text\", 'type', old.\"type\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_deal_notes_into_oplog\n  AFTER UPDATE ON \"public\".\"deal_notes\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_deal_notes_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_deal_notes_into_oplog ON \"public\".\"deal_notes\";",
      "    CREATE OR REPLACE FUNCTION delete_public_deal_notes_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'deal_notes';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'deal_notes',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('date', old.\"date\", 'deal_id', old.\"deal_id\", 'id', old.\"id\", 'sales_id', old.\"sales_id\", 'text', old.\"text\", 'type', old.\"type\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_deal_notes_into_oplog\n  AFTER DELETE ON \"public\".\"deal_notes\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_deal_notes_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_deal_notes_deal_id_into_oplog ON \"public\".\"deal_notes\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_deal_notes_deal_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'deal_notes';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'deals',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"deals\"\n          WHERE \"id\" = NEW.\"deal_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_deal_notes_deal_id_into_oplog\n  AFTER INSERT ON \"public\".\"deal_notes\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_deal_notes_deal_id_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_deal_notes_deal_id_into_oplog ON \"public\".\"deal_notes\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_deal_notes_deal_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'deal_notes';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'deals',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"deals\"\n          WHERE \"id\" = NEW.\"deal_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_deal_notes_deal_id_into_oplog\n  AFTER UPDATE ON \"public\".\"deal_notes\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_deal_notes_deal_id_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_insert_public_deal_notes_sales_id_into_oplog ON \"public\".\"deal_notes\";",
      "    CREATE OR REPLACE FUNCTION compensation_insert_public_deal_notes_sales_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'deal_notes';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'sales',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"sales\"\n          WHERE \"id\" = NEW.\"sales_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_insert_public_deal_notes_sales_id_into_oplog\n  AFTER INSERT ON \"public\".\"deal_notes\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_insert_public_deal_notes_sales_id_into_oplog_function();",
      "DROP TRIGGER IF EXISTS compensation_update_public_deal_notes_sales_id_into_oplog ON \"public\".\"deal_notes\";",
      "    CREATE OR REPLACE FUNCTION compensation_update_public_deal_notes_sales_id_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n        meta_value INTEGER;\n      BEGIN\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'deal_notes';\n\n        SELECT value INTO meta_value FROM \"public\"._electric_meta WHERE key = 'compensations';\n\n        IF flag_value = 1 AND meta_value = 1 THEN\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          SELECT\n            'public',\n            'sales',\n            'COMPENSATION',\n            json_strip_nulls(json_strip_nulls(json_build_object('id', \"id\"))),\n            jsonb_build_object('id', \"id\"),\n            NULL,\n            NULL\n          FROM \"public\".\"sales\"\n          WHERE \"id\" = NEW.\"sales_id\";\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER compensation_update_public_deal_notes_sales_id_into_oplog\n  AFTER UPDATE ON \"public\".\"deal_notes\"\n    FOR EACH ROW\n      EXECUTE FUNCTION compensation_update_public_deal_notes_sales_id_into_oplog_function();"
    ],
    "version": "1"
  }
]