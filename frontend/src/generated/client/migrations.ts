export default [
  {
    "statements": [
      "CREATE TABLE \"sales\" (\n  \"id\" TEXT NOT NULL,\n  \"first_name\" TEXT NOT NULL,\n  \"last_name\" TEXT NOT NULL,\n  \"email\" TEXT NOT NULL,\n  CONSTRAINT \"sales_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"tags\" (\n  \"id\" TEXT NOT NULL,\n  \"name\" TEXT NOT NULL,\n  \"color\" TEXT NOT NULL,\n  CONSTRAINT \"tags_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"companies\" (\n  \"id\" TEXT NOT NULL,\n  \"name\" TEXT NOT NULL,\n  \"logo\" TEXT_JSON,\n  \"sector\" TEXT NOT NULL,\n  \"size\" INTEGER NOT NULL,\n  \"linked_in\" TEXT NOT NULL,\n  \"website\" TEXT NOT NULL,\n  \"phone_number\" TEXT NOT NULL,\n  \"address\" TEXT NOT NULL,\n  \"zipcode\" TEXT NOT NULL,\n  \"city\" TEXT NOT NULL,\n  \"state_abbr\" TEXT NOT NULL,\n  \"sales_id\" TEXT NOT NULL,\n  \"created_at\" TEXT NOT NULL,\n  CONSTRAINT \"companies_sales_id_fkey\" FOREIGN KEY (\"sales_id\") REFERENCES \"sales\" (\"id\") ON DELETE CASCADE,\n  CONSTRAINT \"companies_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"contacts\" (\n  \"id\" TEXT NOT NULL,\n  \"first_name\" TEXT NOT NULL,\n  \"last_name\" TEXT NOT NULL,\n  \"gender\" TEXT,\n  \"title\" TEXT,\n  \"email\" TEXT NOT NULL,\n  \"phone_number1\" TEXT,\n  \"phone_number2\" TEXT,\n  \"background\" TEXT,\n  \"acquisition\" TEXT,\n  \"avatar\" TEXT_JSON,\n  \"first_seen\" TEXT NOT NULL,\n  \"last_seen\" TEXT NOT NULL,\n  \"has_newsletter\" INTEGER,\n  \"status\" TEXT NOT NULL,\n  \"company_id\" TEXT NOT NULL,\n  \"sales_id\" TEXT NOT NULL,\n  \"tags\" TEXT_JSON,\n  CONSTRAINT \"contacts_company_id_fkey\" FOREIGN KEY (\"company_id\") REFERENCES \"companies\" (\"id\") ON DELETE CASCADE,\n  CONSTRAINT \"contacts_sales_id_fkey\" FOREIGN KEY (\"sales_id\") REFERENCES \"sales\" (\"id\") ON DELETE CASCADE,\n  CONSTRAINT \"contacts_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"contact_notes\" (\n  \"id\" TEXT NOT NULL,\n  \"date\" TEXT NOT NULL,\n  \"type\" TEXT NOT NULL,\n  \"text\" TEXT NOT NULL,\n  \"sales_id\" TEXT NOT NULL,\n  \"contact_id\" TEXT,\n  \"status\" TEXT NOT NULL,\n  CONSTRAINT \"contact_notes_contact_id_fkey\" FOREIGN KEY (\"contact_id\") REFERENCES \"contacts\" (\"id\") ON DELETE SET NULL,\n  CONSTRAINT \"contact_notes_sales_id_fkey\" FOREIGN KEY (\"sales_id\") REFERENCES \"sales\" (\"id\") ON DELETE CASCADE,\n  CONSTRAINT \"contact_notes_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"tasks\" (\n  \"id\" TEXT NOT NULL,\n  \"due_date\" TEXT,\n  \"text\" TEXT,\n  \"contact_id\" TEXT,\n  \"sales_id\" TEXT,\n  \"type\" TEXT,\n  CONSTRAINT \"tasks_contact_id_fkey\" FOREIGN KEY (\"contact_id\") REFERENCES \"contacts\" (\"id\") ON DELETE SET NULL,\n  CONSTRAINT \"tasks_sales_id_fkey\" FOREIGN KEY (\"sales_id\") REFERENCES \"sales\" (\"id\") ON DELETE SET NULL,\n  CONSTRAINT \"tasks_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"deals\" (\n  \"id\" TEXT NOT NULL,\n  \"created_at\" TEXT NOT NULL,\n  \"name\" TEXT NOT NULL,\n  \"contact_ids\" TEXT_JSON,\n  \"type\" TEXT NOT NULL,\n  \"stage\" TEXT NOT NULL,\n  \"description\" TEXT,\n  \"amount\" INTEGER NOT NULL,\n  \"updated_at\" TEXT NOT NULL,\n  \"start_at\" TEXT,\n  \"company_id\" TEXT NOT NULL,\n  \"sales_id\" TEXT NOT NULL,\n  \"anindex\" INTEGER NOT NULL,\n  CONSTRAINT \"deals_company_id_fkey\" FOREIGN KEY (\"company_id\") REFERENCES \"companies\" (\"id\") ON DELETE CASCADE,\n  CONSTRAINT \"deals_sales_id_fkey\" FOREIGN KEY (\"sales_id\") REFERENCES \"sales\" (\"id\") ON DELETE CASCADE,\n  CONSTRAINT \"deals_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"deal_notes\" (\n  \"id\" TEXT NOT NULL,\n  \"date\" TEXT NOT NULL,\n  \"type\" TEXT NOT NULL,\n  \"deal_id\" TEXT NOT NULL,\n  \"sales_id\" TEXT NOT NULL,\n  \"text\" TEXT NOT NULL,\n  CONSTRAINT \"deal_notes_deal_id_fkey\" FOREIGN KEY (\"deal_id\") REFERENCES \"deals\" (\"id\") ON DELETE CASCADE,\n  CONSTRAINT \"deal_notes_sales_id_fkey\" FOREIGN KEY (\"sales_id\") REFERENCES \"sales\" (\"id\") ON DELETE CASCADE,\n  CONSTRAINT \"deal_notes_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'sales', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_sales_primarykey;",
      "CREATE TRIGGER update_ensure_main_sales_primarykey\n  BEFORE UPDATE ON \"main\".\"sales\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_sales_into_oplog;",
      "CREATE TRIGGER insert_main_sales_into_oplog\n   AFTER INSERT ON \"main\".\"sales\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'sales')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'sales', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('email', new.\"email\", 'first_name', new.\"first_name\", 'id', new.\"id\", 'last_name', new.\"last_name\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_sales_into_oplog;",
      "CREATE TRIGGER update_main_sales_into_oplog\n   AFTER UPDATE ON \"main\".\"sales\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'sales')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'sales', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('email', new.\"email\", 'first_name', new.\"first_name\", 'id', new.\"id\", 'last_name', new.\"last_name\"), json_object('email', old.\"email\", 'first_name', old.\"first_name\", 'id', old.\"id\", 'last_name', old.\"last_name\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_sales_into_oplog;",
      "CREATE TRIGGER delete_main_sales_into_oplog\n   AFTER DELETE ON \"main\".\"sales\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'sales')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'sales', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('email', old.\"email\", 'first_name', old.\"first_name\", 'id', old.\"id\", 'last_name', old.\"last_name\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'tags', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_tags_primarykey;",
      "CREATE TRIGGER update_ensure_main_tags_primarykey\n  BEFORE UPDATE ON \"main\".\"tags\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_tags_into_oplog;",
      "CREATE TRIGGER insert_main_tags_into_oplog\n   AFTER INSERT ON \"main\".\"tags\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'tags')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'tags', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('color', new.\"color\", 'id', new.\"id\", 'name', new.\"name\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_tags_into_oplog;",
      "CREATE TRIGGER update_main_tags_into_oplog\n   AFTER UPDATE ON \"main\".\"tags\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'tags')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'tags', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('color', new.\"color\", 'id', new.\"id\", 'name', new.\"name\"), json_object('color', old.\"color\", 'id', old.\"id\", 'name', old.\"name\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_tags_into_oplog;",
      "CREATE TRIGGER delete_main_tags_into_oplog\n   AFTER DELETE ON \"main\".\"tags\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'tags')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'tags', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('color', old.\"color\", 'id', old.\"id\", 'name', old.\"name\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'companies', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_companies_primarykey;",
      "CREATE TRIGGER update_ensure_main_companies_primarykey\n  BEFORE UPDATE ON \"main\".\"companies\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_companies_into_oplog;",
      "CREATE TRIGGER insert_main_companies_into_oplog\n   AFTER INSERT ON \"main\".\"companies\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'companies')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'companies', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('address', new.\"address\", 'city', new.\"city\", 'created_at', new.\"created_at\", 'id', new.\"id\", 'linked_in', new.\"linked_in\", 'logo', new.\"logo\", 'name', new.\"name\", 'phone_number', new.\"phone_number\", 'sales_id', new.\"sales_id\", 'sector', new.\"sector\", 'size', new.\"size\", 'state_abbr', new.\"state_abbr\", 'website', new.\"website\", 'zipcode', new.\"zipcode\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_companies_into_oplog;",
      "CREATE TRIGGER update_main_companies_into_oplog\n   AFTER UPDATE ON \"main\".\"companies\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'companies')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'companies', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('address', new.\"address\", 'city', new.\"city\", 'created_at', new.\"created_at\", 'id', new.\"id\", 'linked_in', new.\"linked_in\", 'logo', new.\"logo\", 'name', new.\"name\", 'phone_number', new.\"phone_number\", 'sales_id', new.\"sales_id\", 'sector', new.\"sector\", 'size', new.\"size\", 'state_abbr', new.\"state_abbr\", 'website', new.\"website\", 'zipcode', new.\"zipcode\"), json_object('address', old.\"address\", 'city', old.\"city\", 'created_at', old.\"created_at\", 'id', old.\"id\", 'linked_in', old.\"linked_in\", 'logo', old.\"logo\", 'name', old.\"name\", 'phone_number', old.\"phone_number\", 'sales_id', old.\"sales_id\", 'sector', old.\"sector\", 'size', old.\"size\", 'state_abbr', old.\"state_abbr\", 'website', old.\"website\", 'zipcode', old.\"zipcode\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_companies_into_oplog;",
      "CREATE TRIGGER delete_main_companies_into_oplog\n   AFTER DELETE ON \"main\".\"companies\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'companies')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'companies', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('address', old.\"address\", 'city', old.\"city\", 'created_at', old.\"created_at\", 'id', old.\"id\", 'linked_in', old.\"linked_in\", 'logo', old.\"logo\", 'name', old.\"name\", 'phone_number', old.\"phone_number\", 'sales_id', old.\"sales_id\", 'sector', old.\"sector\", 'size', old.\"size\", 'state_abbr', old.\"state_abbr\", 'website', old.\"website\", 'zipcode', old.\"zipcode\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_companies_sales_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_companies_sales_id_into_oplog\n  AFTER INSERT ON \"main\".\"companies\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'companies') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'sales', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"sales\" WHERE \"id\" = new.\"sales_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_companies_sales_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_companies_sales_id_into_oplog\n  AFTER UPDATE ON \"main\".\"companies\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'companies') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'sales', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"sales\" WHERE \"id\" = new.\"sales_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'contacts', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_contacts_primarykey;",
      "CREATE TRIGGER update_ensure_main_contacts_primarykey\n  BEFORE UPDATE ON \"main\".\"contacts\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_contacts_into_oplog;",
      "CREATE TRIGGER insert_main_contacts_into_oplog\n   AFTER INSERT ON \"main\".\"contacts\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'contacts')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'contacts', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('acquisition', new.\"acquisition\", 'avatar', new.\"avatar\", 'background', new.\"background\", 'company_id', new.\"company_id\", 'email', new.\"email\", 'first_name', new.\"first_name\", 'first_seen', new.\"first_seen\", 'gender', new.\"gender\", 'has_newsletter', new.\"has_newsletter\", 'id', new.\"id\", 'last_name', new.\"last_name\", 'last_seen', new.\"last_seen\", 'phone_number1', new.\"phone_number1\", 'phone_number2', new.\"phone_number2\", 'sales_id', new.\"sales_id\", 'status', new.\"status\", 'tags', new.\"tags\", 'title', new.\"title\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_contacts_into_oplog;",
      "CREATE TRIGGER update_main_contacts_into_oplog\n   AFTER UPDATE ON \"main\".\"contacts\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'contacts')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'contacts', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('acquisition', new.\"acquisition\", 'avatar', new.\"avatar\", 'background', new.\"background\", 'company_id', new.\"company_id\", 'email', new.\"email\", 'first_name', new.\"first_name\", 'first_seen', new.\"first_seen\", 'gender', new.\"gender\", 'has_newsletter', new.\"has_newsletter\", 'id', new.\"id\", 'last_name', new.\"last_name\", 'last_seen', new.\"last_seen\", 'phone_number1', new.\"phone_number1\", 'phone_number2', new.\"phone_number2\", 'sales_id', new.\"sales_id\", 'status', new.\"status\", 'tags', new.\"tags\", 'title', new.\"title\"), json_object('acquisition', old.\"acquisition\", 'avatar', old.\"avatar\", 'background', old.\"background\", 'company_id', old.\"company_id\", 'email', old.\"email\", 'first_name', old.\"first_name\", 'first_seen', old.\"first_seen\", 'gender', old.\"gender\", 'has_newsletter', old.\"has_newsletter\", 'id', old.\"id\", 'last_name', old.\"last_name\", 'last_seen', old.\"last_seen\", 'phone_number1', old.\"phone_number1\", 'phone_number2', old.\"phone_number2\", 'sales_id', old.\"sales_id\", 'status', old.\"status\", 'tags', old.\"tags\", 'title', old.\"title\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_contacts_into_oplog;",
      "CREATE TRIGGER delete_main_contacts_into_oplog\n   AFTER DELETE ON \"main\".\"contacts\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'contacts')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'contacts', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('acquisition', old.\"acquisition\", 'avatar', old.\"avatar\", 'background', old.\"background\", 'company_id', old.\"company_id\", 'email', old.\"email\", 'first_name', old.\"first_name\", 'first_seen', old.\"first_seen\", 'gender', old.\"gender\", 'has_newsletter', old.\"has_newsletter\", 'id', old.\"id\", 'last_name', old.\"last_name\", 'last_seen', old.\"last_seen\", 'phone_number1', old.\"phone_number1\", 'phone_number2', old.\"phone_number2\", 'sales_id', old.\"sales_id\", 'status', old.\"status\", 'tags', old.\"tags\", 'title', old.\"title\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_contacts_company_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_contacts_company_id_into_oplog\n  AFTER INSERT ON \"main\".\"contacts\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'contacts') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'companies', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"companies\" WHERE \"id\" = new.\"company_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_contacts_company_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_contacts_company_id_into_oplog\n  AFTER UPDATE ON \"main\".\"contacts\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'contacts') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'companies', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"companies\" WHERE \"id\" = new.\"company_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_contacts_sales_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_contacts_sales_id_into_oplog\n  AFTER INSERT ON \"main\".\"contacts\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'contacts') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'sales', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"sales\" WHERE \"id\" = new.\"sales_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_contacts_sales_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_contacts_sales_id_into_oplog\n  AFTER UPDATE ON \"main\".\"contacts\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'contacts') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'sales', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"sales\" WHERE \"id\" = new.\"sales_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'contact_notes', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_contact_notes_primarykey;",
      "CREATE TRIGGER update_ensure_main_contact_notes_primarykey\n  BEFORE UPDATE ON \"main\".\"contact_notes\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_contact_notes_into_oplog;",
      "CREATE TRIGGER insert_main_contact_notes_into_oplog\n   AFTER INSERT ON \"main\".\"contact_notes\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'contact_notes')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'contact_notes', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('contact_id', new.\"contact_id\", 'date', new.\"date\", 'id', new.\"id\", 'sales_id', new.\"sales_id\", 'status', new.\"status\", 'text', new.\"text\", 'type', new.\"type\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_contact_notes_into_oplog;",
      "CREATE TRIGGER update_main_contact_notes_into_oplog\n   AFTER UPDATE ON \"main\".\"contact_notes\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'contact_notes')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'contact_notes', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('contact_id', new.\"contact_id\", 'date', new.\"date\", 'id', new.\"id\", 'sales_id', new.\"sales_id\", 'status', new.\"status\", 'text', new.\"text\", 'type', new.\"type\"), json_object('contact_id', old.\"contact_id\", 'date', old.\"date\", 'id', old.\"id\", 'sales_id', old.\"sales_id\", 'status', old.\"status\", 'text', old.\"text\", 'type', old.\"type\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_contact_notes_into_oplog;",
      "CREATE TRIGGER delete_main_contact_notes_into_oplog\n   AFTER DELETE ON \"main\".\"contact_notes\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'contact_notes')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'contact_notes', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('contact_id', old.\"contact_id\", 'date', old.\"date\", 'id', old.\"id\", 'sales_id', old.\"sales_id\", 'status', old.\"status\", 'text', old.\"text\", 'type', old.\"type\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_contact_notes_contact_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_contact_notes_contact_id_into_oplog\n  AFTER INSERT ON \"main\".\"contact_notes\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'contact_notes') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'contacts', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"contacts\" WHERE \"id\" = new.\"contact_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_contact_notes_contact_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_contact_notes_contact_id_into_oplog\n  AFTER UPDATE ON \"main\".\"contact_notes\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'contact_notes') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'contacts', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"contacts\" WHERE \"id\" = new.\"contact_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_contact_notes_sales_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_contact_notes_sales_id_into_oplog\n  AFTER INSERT ON \"main\".\"contact_notes\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'contact_notes') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'sales', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"sales\" WHERE \"id\" = new.\"sales_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_contact_notes_sales_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_contact_notes_sales_id_into_oplog\n  AFTER UPDATE ON \"main\".\"contact_notes\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'contact_notes') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'sales', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"sales\" WHERE \"id\" = new.\"sales_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'tasks', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_tasks_primarykey;",
      "CREATE TRIGGER update_ensure_main_tasks_primarykey\n  BEFORE UPDATE ON \"main\".\"tasks\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_tasks_into_oplog;",
      "CREATE TRIGGER insert_main_tasks_into_oplog\n   AFTER INSERT ON \"main\".\"tasks\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'tasks')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'tasks', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('contact_id', new.\"contact_id\", 'due_date', new.\"due_date\", 'id', new.\"id\", 'sales_id', new.\"sales_id\", 'text', new.\"text\", 'type', new.\"type\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_tasks_into_oplog;",
      "CREATE TRIGGER update_main_tasks_into_oplog\n   AFTER UPDATE ON \"main\".\"tasks\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'tasks')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'tasks', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('contact_id', new.\"contact_id\", 'due_date', new.\"due_date\", 'id', new.\"id\", 'sales_id', new.\"sales_id\", 'text', new.\"text\", 'type', new.\"type\"), json_object('contact_id', old.\"contact_id\", 'due_date', old.\"due_date\", 'id', old.\"id\", 'sales_id', old.\"sales_id\", 'text', old.\"text\", 'type', old.\"type\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_tasks_into_oplog;",
      "CREATE TRIGGER delete_main_tasks_into_oplog\n   AFTER DELETE ON \"main\".\"tasks\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'tasks')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'tasks', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('contact_id', old.\"contact_id\", 'due_date', old.\"due_date\", 'id', old.\"id\", 'sales_id', old.\"sales_id\", 'text', old.\"text\", 'type', old.\"type\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_tasks_contact_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_tasks_contact_id_into_oplog\n  AFTER INSERT ON \"main\".\"tasks\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'tasks') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'contacts', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"contacts\" WHERE \"id\" = new.\"contact_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_tasks_contact_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_tasks_contact_id_into_oplog\n  AFTER UPDATE ON \"main\".\"tasks\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'tasks') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'contacts', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"contacts\" WHERE \"id\" = new.\"contact_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_tasks_sales_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_tasks_sales_id_into_oplog\n  AFTER INSERT ON \"main\".\"tasks\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'tasks') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'sales', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"sales\" WHERE \"id\" = new.\"sales_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_tasks_sales_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_tasks_sales_id_into_oplog\n  AFTER UPDATE ON \"main\".\"tasks\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'tasks') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'sales', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"sales\" WHERE \"id\" = new.\"sales_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'deals', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_deals_primarykey;",
      "CREATE TRIGGER update_ensure_main_deals_primarykey\n  BEFORE UPDATE ON \"main\".\"deals\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_deals_into_oplog;",
      "CREATE TRIGGER insert_main_deals_into_oplog\n   AFTER INSERT ON \"main\".\"deals\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'deals')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'deals', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('amount', new.\"amount\", 'anindex', new.\"anindex\", 'company_id', new.\"company_id\", 'contact_ids', new.\"contact_ids\", 'created_at', new.\"created_at\", 'description', new.\"description\", 'id', new.\"id\", 'name', new.\"name\", 'sales_id', new.\"sales_id\", 'stage', new.\"stage\", 'start_at', new.\"start_at\", 'type', new.\"type\", 'updated_at', new.\"updated_at\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_deals_into_oplog;",
      "CREATE TRIGGER update_main_deals_into_oplog\n   AFTER UPDATE ON \"main\".\"deals\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'deals')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'deals', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('amount', new.\"amount\", 'anindex', new.\"anindex\", 'company_id', new.\"company_id\", 'contact_ids', new.\"contact_ids\", 'created_at', new.\"created_at\", 'description', new.\"description\", 'id', new.\"id\", 'name', new.\"name\", 'sales_id', new.\"sales_id\", 'stage', new.\"stage\", 'start_at', new.\"start_at\", 'type', new.\"type\", 'updated_at', new.\"updated_at\"), json_object('amount', old.\"amount\", 'anindex', old.\"anindex\", 'company_id', old.\"company_id\", 'contact_ids', old.\"contact_ids\", 'created_at', old.\"created_at\", 'description', old.\"description\", 'id', old.\"id\", 'name', old.\"name\", 'sales_id', old.\"sales_id\", 'stage', old.\"stage\", 'start_at', old.\"start_at\", 'type', old.\"type\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_deals_into_oplog;",
      "CREATE TRIGGER delete_main_deals_into_oplog\n   AFTER DELETE ON \"main\".\"deals\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'deals')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'deals', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('amount', old.\"amount\", 'anindex', old.\"anindex\", 'company_id', old.\"company_id\", 'contact_ids', old.\"contact_ids\", 'created_at', old.\"created_at\", 'description', old.\"description\", 'id', old.\"id\", 'name', old.\"name\", 'sales_id', old.\"sales_id\", 'stage', old.\"stage\", 'start_at', old.\"start_at\", 'type', old.\"type\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_deals_company_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_deals_company_id_into_oplog\n  AFTER INSERT ON \"main\".\"deals\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'deals') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'companies', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"companies\" WHERE \"id\" = new.\"company_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_deals_company_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_deals_company_id_into_oplog\n  AFTER UPDATE ON \"main\".\"deals\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'deals') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'companies', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"companies\" WHERE \"id\" = new.\"company_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_deals_sales_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_deals_sales_id_into_oplog\n  AFTER INSERT ON \"main\".\"deals\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'deals') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'sales', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"sales\" WHERE \"id\" = new.\"sales_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_deals_sales_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_deals_sales_id_into_oplog\n  AFTER UPDATE ON \"main\".\"deals\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'deals') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'sales', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"sales\" WHERE \"id\" = new.\"sales_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings (namespace, tablename, flag) VALUES ('main', 'deal_notes', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_deal_notes_primarykey;",
      "CREATE TRIGGER update_ensure_main_deal_notes_primarykey\n  BEFORE UPDATE ON \"main\".\"deal_notes\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_deal_notes_into_oplog;",
      "CREATE TRIGGER insert_main_deal_notes_into_oplog\n   AFTER INSERT ON \"main\".\"deal_notes\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'deal_notes')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'deal_notes', 'INSERT', json_patch('{}', json_object('id', new.\"id\")), json_object('date', new.\"date\", 'deal_id', new.\"deal_id\", 'id', new.\"id\", 'sales_id', new.\"sales_id\", 'text', new.\"text\", 'type', new.\"type\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_deal_notes_into_oplog;",
      "CREATE TRIGGER update_main_deal_notes_into_oplog\n   AFTER UPDATE ON \"main\".\"deal_notes\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'deal_notes')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'deal_notes', 'UPDATE', json_patch('{}', json_object('id', new.\"id\")), json_object('date', new.\"date\", 'deal_id', new.\"deal_id\", 'id', new.\"id\", 'sales_id', new.\"sales_id\", 'text', new.\"text\", 'type', new.\"type\"), json_object('date', old.\"date\", 'deal_id', old.\"deal_id\", 'id', old.\"id\", 'sales_id', old.\"sales_id\", 'text', old.\"text\", 'type', old.\"type\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_deal_notes_into_oplog;",
      "CREATE TRIGGER delete_main_deal_notes_into_oplog\n   AFTER DELETE ON \"main\".\"deal_notes\"\n   WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'deal_notes')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'deal_notes', 'DELETE', json_patch('{}', json_object('id', old.\"id\")), NULL, json_object('date', old.\"date\", 'deal_id', old.\"deal_id\", 'id', old.\"id\", 'sales_id', old.\"sales_id\", 'text', old.\"text\", 'type', old.\"type\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_deal_notes_deal_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_deal_notes_deal_id_into_oplog\n  AFTER INSERT ON \"main\".\"deal_notes\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'deal_notes') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'deals', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"deals\" WHERE \"id\" = new.\"deal_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_deal_notes_deal_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_deal_notes_deal_id_into_oplog\n  AFTER UPDATE ON \"main\".\"deal_notes\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'deal_notes') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'deals', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"deals\" WHERE \"id\" = new.\"deal_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_deal_notes_sales_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_deal_notes_sales_id_into_oplog\n  AFTER INSERT ON \"main\".\"deal_notes\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'deal_notes') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'sales', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"sales\" WHERE \"id\" = new.\"sales_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_deal_notes_sales_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_deal_notes_sales_id_into_oplog\n  AFTER UPDATE ON \"main\".\"deal_notes\"\n  WHEN 1 = (SELECT flag from _electric_trigger_settings WHERE namespace = 'main' AND tablename = 'deal_notes') AND\n       1 = (SELECT value from _electric_meta WHERE key = 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'sales', 'COMPENSATION', json_patch('{}', json_object('id', \"id\")), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"sales\" WHERE \"id\" = new.\"sales_id\";\nEND;"
    ],
    "version": "1"
  }
]